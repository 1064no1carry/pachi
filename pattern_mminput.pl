#!/usr/bin/perl
# pattern_mminput - convert patterns for Remi Coulom's MM tool
#
# First, run pattern_enumerate, then feed it to this one. The script will
# also use the pattern.fdict file generated by pattern_enumerate, so direct
# piping probably will not work.
#
# We use two-pass approach mainly basically to find out how many features
# of certain kind there are.
#
# See mm/README for format of generated output.

my @fi, @fc, @fn; # start indices, counts, maps

my $total;
my $df = "patterns.fdict";
open D, $df or die "$df: $!";
while (<D>) {
	chomp;
	my ($si, $fi, $fpi, $fn, $fp) = (/^(.*?) (.*?):(.*?) (.*?):(.*?)$/);
	$fn[$fi] = $fn;
	defined $fi[$fi] or $fi[$fi] = $si;
	$fc[$fi]++;
	$total = $si + 1;
}
close D;

print "! $total\n";
print (@fi."\n");
foreach my $i (0 .. $#fi) {
	print $fc[$i]." ".$fn[$i]."\n";
}
print "!\n";

while (<>) {
	chomp;
	s/^\(//; s/\)$//;
	my @patterns = split(/\) \(/, $_);
	my @teams = ();
	print "#\n";
	foreach my $pat (@patterns) {
		my @feats = split(/ /, $pat);
		my @tfeats = ();
		foreach my $feat (@feats) {
			my ($fi, $fp) = split(/:/, $feat);
			push @tfeats, $fi[$fi] + $fp;
		}
		push @teams, join(' ', @tfeats);
	}
	print $teams[0]."\n";
	foreach my $i (0 .. $#teams) {
		print $teams[$i]."\n";
	}
}
