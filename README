ZZGo is a simple modular framework for robots playing the game of
Go/Weiqi/Baduk. The aim is to make it easy to plug your engine
to the common infrastructure and implement your ideas while
minimalizing the overhead of implementing the GTP, board tools, etc.
The infrastructure is optimized for maximal speed, to make it well
suited for bruteforce engines.

ZZGo is under the MIT licence (close to public domain) so that as
many people as possible can use it. Some of the bundled engines
might be under a more restrictive licence (GPL).

Some optimizations are inspired by libEGo by Lukasz Lew. The code
is all original, though.


Currently, ZZGo support barely enough for a trivial "random move"
engine to play with idiotbot (and usually lose). The infrastructure
should be pretty fast though (and can be further optimized based on
profiling) and it should be quite easy to extend it to provide more
facilities for your engine (but it should be at the same time kept
as simple as possible).

ZZGo uses Chinese scoring, currently. That means, it simply counts
the number of stones of each color on the board, plus komi. Additional
hack is that it does not count groups in atari, if the opponent neglected
to remove them; it is still one-point off there, though. In addition,
ZZGo cannot count multi-point eyes.

Also, ZZGo supports only few GTP commands now. Most importantly,
it does not support the known_command and final_status_list commands.


To build zzgo, simply type:

	make

Built zzgo binary in the current directory is a GTP client; use your
favorite Go client to connect to it (generally it should be possible
to use it in place of GNU Go), or use kgsGtp to connect to KGS.
The zzgo binary can take some parameters.

To build better optimized binary, type:

	make zzgo-profiled

This will also create binary zzgo, but while the build will take
more time (probably less than a minute anyway), the resulting binary
will be about 1/4 to 1/5 faster.
