Pachi is a simple modular framework for robots playing the game of
Go/Weiqi/Baduk. The aim is to make it easy to plug your engine
to the common infrastructure and implement your ideas while
minimalizing the overhead of implementing the GTP, board tools, etc.
Also, there are premade random playout and UCT tree engines, so that
you can directly tweak only particular policies.

The infrastructure is optimized for speed to make it well suited
for bruteforce engines, however tradeoffs are made to make it useful
for heavier MonteCarlo playouts as well (e.g. real liberties are
tracked instead of pseudoliberties). If you are looking for raw
light playout speed, libEGO is better choice.

Pachi is under the MIT licence (almost public domain) so that as
many people as possible can use it; if you use it to create your engine,
appropriate credits would be appreciated. Some of the bundled engines
or policies are under a more restrictive licence (GPL).


Currently, Pachi supports a simple idiotbot-like engine and an example
MonteCarlo-player with bits of optional domain-specific knowledge.
Also, example UCT engine is provided, reusing the same knowledge.
The infrastructure is pretty fast and it should be quite easy to extend
it to provide more facilities for your engine (but it should be at
the same time kept as simple as possible).

Pachi uses New Zealand scoring, currently. That means, it simply counts
the number of stones and one-point eyes of each color on the board,
plus komi and handicap correction.

New Zealand rules also mean that multi-stone suicide is allowed! If you
do not like that (basically if you want to pretend it plays according
to Chinese rules), you need to rule that out in your engine, currently.
The provided engines avoid multi-stone suicide.

New Zealand rules have positional superko. It is checked in every move
played, even during random playouts.


Also, Pachi supports only few GTP commands now. Most importantly,
it does not support the known_command and final_status_list commands.


To build Pachi, simply type:

	make

Built zzgo binary (named that way from historical reasons) in the current
directory is a GTP client; use your favorite Go client to connect to it
(generally it should be possible to use it in place of GNU Go), or use kgsGtp
to connect to KGS.  The zzgo binary can take some parameters.

To build better optimized binary, type:

	make zzgo-profiled

This will also create binary zzgo, but while the build will take
more time (probably less than a minute anyway), the resulting binary
will be about 1/4 to 1/5 faster.
