#!/usr/bin/perl
# pachilog2gtp - reconstruct gtp stream from pachi log
# usage: pachilog2gtp pachi.log

open(IN, "< $ARGV[0]") || die "couldn't open '$ARGV[0]'";

my $abcd = "abcdefghjklmnopqrstuvwxyz";

sub coord2gtp
{
    my ($x, $y) = @_;
    $y += 0;
    return substr($abcd, $x-1, 1) . $y;
}


# Parse last board diagram to get genmove coord
# returns "pass" for pass or resign ...
sub get_board_print_last_move
{
    my $seen_board = 0;
    
    while (my $s = <IN>) {
	if ($s =~ m/^IN: /)  {  die "fixme, handle new gtp command inside genmove";  }
	if ($s !~ m/^ ([ 1][0-9]) \| (([.OX][ )])+)\|/) { 
	    if ($seen_board) {  return "pass";  } else {  next;  }
	}

	$seen_board = 1;
	my ($l, $stones, $post) = ($1, $2, $2);
	$stones =~ s/(.)./$1/g;
	$post   =~ s/.(.)/$1/g;
	my @stones = split("", $stones);
	my @post   = split("", $post);
	
	for (my $i = 0; $i < @stones; $i++) {
	    if ($post[$i] eq ")") { return coord2gtp($i+1, $l); }
	}
    }
    die "shouldn't happen";
}

sub get_genmove_coord
{
    while (my $s = <IN>) {
	if ($s =~ m/^Move:/) {  return get_board_print_last_move();  }
	if ($s =~ m/^IN: /)  {  die "fixme, handle new gtp command inside genmove";  }
    }
    die "shouldn't happen";
}

while (my $str = <IN>) {
    if ($str !~ m/^IN: (.*)/) {  next;  }
    $str = $1;
    $str =~ s|\r||g;

    if ($str =~ m/^genmove ([bw])/i) {
	my $color = lc($1);
	my $coord = get_genmove_coord();
	($coord ne "") || die "shouldn't happen";
	printf("play %s %s\n", $color, $coord);
	next; 
    }
    print "$str\n";
}
